#include <gtest/gtest.h>

#include "hlp_test.hpp"

auto constexpr NAME = "quotedParser";
static const std::string TARGET = "/TargetField";

INSTANTIATE_TEST_SUITE_P(QuotedBuild,
                         HlpBuildTest,
                         ::testing::Values(BuildT(SUCCESS, getQuotedParser, {NAME, TARGET, {}, {}}),
                                           BuildT(SUCCESS, getQuotedParser, {NAME, TARGET, {}, {"q"}}),
                                           BuildT(SUCCESS, getQuotedParser, {NAME, TARGET, {}, {"q", "e"}}),
                                           BuildT(FAILURE, getQuotedParser, {NAME, TARGET, {}, {"quoted"}}),
                                           BuildT(FAILURE, getQuotedParser, {NAME, TARGET, {}, {"q", "escape"}}),
                                           BuildT(FAILURE, getQuotedParser, {NAME, TARGET, {}, {"q", "e", "?"}})));

INSTANTIATE_TEST_SUITE_P(QuotedParse,
                         HlpParseTest,
                         ::testing::Values(
                             // Default parameters
                             ParseT(FAILURE, "cyb3rhq", {}, 0, getQuotedParser, {NAME, TARGET, {}, {}}),
                             ParseT(FAILURE, R"("cyb3rhq 123)", {}, 0, getQuotedParser, {NAME, TARGET, {}, {}}),
                             ParseT(SUCCESS,
                                    R"("Cyb3rhq" 123)",
                                    j(fmt::format(R"({{"{}":"Cyb3rhq"}})", TARGET.substr(1))),
                                    7,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {}}),
                             ParseT(SUCCESS,
                                    R"("Cyb3rhq")",
                                    j(fmt::format(R"({{"{}":"Cyb3rhq"}})", TARGET.substr(1))),
                                    7,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {}}),
                             ParseT(SUCCESS,
                                    R"("hi my name is \"Cyb3rhq\"")",
                                    j(fmt::format(R"({{"{}":"hi my name is \"Cyb3rhq\""}})", TARGET.substr(1))),
                                    25,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {}}),
                             ParseT(SUCCESS,
                                    R"("hi my name is \"Cyb3rhq\"" 123456)",
                                    j(fmt::format(R"({{"{}":"hi my name is \"Cyb3rhq\""}})", TARGET.substr(1))),
                                    25,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {}}),
                             // Change " to '
                             ParseT(FAILURE, "cyb3rhq'", {}, 0, getQuotedParser, {NAME, TARGET, {}, {"'"}}),
                             ParseT(FAILURE, R"('cyb3rhq 123)", {}, 0, getQuotedParser, {NAME, TARGET, {}, {"'"}}),
                             ParseT(SUCCESS,
                                    R"('Cyb3rhq' 123)",
                                    j(fmt::format(R"({{"{}":"Cyb3rhq"}})", TARGET.substr(1))),
                                    7,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'"}}),
                             ParseT(SUCCESS,
                                    R"('Cyb3rhq')",
                                    j(fmt::format(R"({{"{}":"Cyb3rhq"}})", TARGET.substr(1))),
                                    7,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'"}}),
                             ParseT(SUCCESS,
                                    R"('hi my name is \'Cyb3rhq\'')",
                                    j(fmt::format(R"({{"{}":"hi my name is 'Cyb3rhq'"}})", TARGET.substr(1))),
                                    25,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'"}}),
                             ParseT(SUCCESS,
                                    R"('hi my name is \'Cyb3rhq\'' 123456)",
                                    j(fmt::format(R"({{"{}":"hi my name is 'Cyb3rhq'"}})", TARGET.substr(1))),
                                    25,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'"}}),
                             // Change " to ' and \ to :
                             ParseT(FAILURE, "cyb3rhq'", {}, 0, getQuotedParser, {NAME, TARGET, {}, {"'", ":"}}),
                             ParseT(FAILURE, R"('cyb3rhq 123)", {}, 0, getQuotedParser, {NAME, TARGET, {}, {"'", ":"}}),
                             ParseT(SUCCESS,
                                    R"('Cyb3rhq' 123)",
                                    j(fmt::format(R"({{"{}":"Cyb3rhq"}})", TARGET.substr(1))),
                                    7,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'", ":"}}),
                             ParseT(SUCCESS,
                                    R"('Cyb3rhq')",
                                    j(fmt::format(R"({{"{}":"Cyb3rhq"}})", TARGET.substr(1))),
                                    7,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'", ":"}}),
                             ParseT(SUCCESS,
                                    R"('hi my name is :'Cyb3rhq:'')",
                                    j(fmt::format(R"({{"{}":"hi my name is 'Cyb3rhq'"}})", TARGET.substr(1))),
                                    25,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'", ":"}}),
                             ParseT(SUCCESS,
                                    R"('hi my name is :'Cyb3rhq:'' 123456)",
                                    j(fmt::format(R"({{"{}":"hi my name is 'Cyb3rhq'"}})", TARGET.substr(1))),
                                    25,
                                    getQuotedParser,
                                    {NAME, TARGET, {}, {"'", ":"}})));

//         // TODO: We want to support this case ?
//         // Mantain " but change escape character to " (Like CSV files)
//         // TestCase {R"(cyb3rhq")", false, {""}, Options {"\"", "\""}, fn(R"({})"), 0},
//         // TestCase {R"("cyb3rhq 123)", false, {""}, Options {"\"", "\""}, fn(R"({})"), 10},
//         // TestCase {
//         //     R"("Cyb3rhq" 123)", true, {""}, Options {"\"", "\""}, fn(R"("Cyb3rhq")"), 7},
//         // TestCase {R"("Cyb3rhq")", true, {""}, Options {"\"", "\""}, fn(R"("Cyb3rhq")"), 7},
//         // TestCase {R"("hi my name is ""Cyb3rhq""")",
//         //           true,
//         //           {""},
//         //           Options {"\"", "\""},
//         //           fn(R"("hi my name is \"Cyb3rhq\"")"),
//         //           25},
//         // TestCase {R"("hi my name is ""Cyb3rhq"" 123456)",
//         //           true,
//         //           {""},
//         //           Options {"\"", "\""},
//         //           fn(R"("hi my name is \"Cyb3rhq\"")"),
//         //           25}
